//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/User/Manual Drive Input Actions/Fanatec.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Fanatec : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Fanatec()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Fanatec"",
    ""maps"": [
        {
            ""name"": ""Drive"",
            ""id"": ""ff11af68-04de-44ed-a067-f371a7791dd7"",
            ""actions"": [
                {
                    ""name"": ""Throttle"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b85c573b-a0f2-4bee-b66a-044ffed7c59f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""PassThrough"",
                    ""id"": ""57dddaa0-68b8-4ff8-8888-73366e711413"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c7622a89-0376-4a48-9982-5a4ecb04de2d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0003a5cc-59ce-46f3-8c08-1b780a574f2a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReverseGear"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8a86adb7-9d24-4cd9-8a53-ad66605dc35e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Respawn"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f51f7c94-8e46-48a0-a452-eb54d14ee60e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""804d641c-8016-40a3-8725-5123ce892662"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/z"",
                    ""interactions"": """",
                    ""processors"": ""Invert,Clamp(max=1)"",
                    ""groups"": """",
                    ""action"": ""Throttle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""055a9d0f-49ae-4db3-83d2-e7b920eb2f8e"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/rz"",
                    ""interactions"": """",
                    ""processors"": ""Invert,Clamp(max=1)"",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb0ad5f2-a7c7-4321-8286-2d983620911c"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7176758a-9915-4242-84d3-043cdb8c7b67"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/slider"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5081da97-4f19-463d-b21d-5a5b3730f3d3"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/button3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReverseGear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e89ce68-221b-4600-a3ea-a9ebcd6e0c45"",
                    ""path"": ""<HID::Fanatec FANATEC Wheel>/button31"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Respawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Drive
        m_Drive = asset.FindActionMap("Drive", throwIfNotFound: true);
        m_Drive_Throttle = m_Drive.FindAction("Throttle", throwIfNotFound: true);
        m_Drive_Brake = m_Drive.FindAction("Brake", throwIfNotFound: true);
        m_Drive_Steer = m_Drive.FindAction("Steer", throwIfNotFound: true);
        m_Drive_Handbrake = m_Drive.FindAction("Handbrake", throwIfNotFound: true);
        m_Drive_ReverseGear = m_Drive.FindAction("ReverseGear", throwIfNotFound: true);
        m_Drive_Respawn = m_Drive.FindAction("Respawn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Drive
    private readonly InputActionMap m_Drive;
    private IDriveActions m_DriveActionsCallbackInterface;
    private readonly InputAction m_Drive_Throttle;
    private readonly InputAction m_Drive_Brake;
    private readonly InputAction m_Drive_Steer;
    private readonly InputAction m_Drive_Handbrake;
    private readonly InputAction m_Drive_ReverseGear;
    private readonly InputAction m_Drive_Respawn;
    public struct DriveActions
    {
        private @Fanatec m_Wrapper;
        public DriveActions(@Fanatec wrapper) { m_Wrapper = wrapper; }
        public InputAction @Throttle => m_Wrapper.m_Drive_Throttle;
        public InputAction @Brake => m_Wrapper.m_Drive_Brake;
        public InputAction @Steer => m_Wrapper.m_Drive_Steer;
        public InputAction @Handbrake => m_Wrapper.m_Drive_Handbrake;
        public InputAction @ReverseGear => m_Wrapper.m_Drive_ReverseGear;
        public InputAction @Respawn => m_Wrapper.m_Drive_Respawn;
        public InputActionMap Get() { return m_Wrapper.m_Drive; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DriveActions set) { return set.Get(); }
        public void SetCallbacks(IDriveActions instance)
        {
            if (m_Wrapper.m_DriveActionsCallbackInterface != null)
            {
                @Throttle.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnThrottle;
                @Throttle.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnThrottle;
                @Throttle.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnThrottle;
                @Brake.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnBrake;
                @Brake.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnBrake;
                @Brake.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnBrake;
                @Steer.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnSteer;
                @Steer.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnSteer;
                @Steer.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnSteer;
                @Handbrake.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnHandbrake;
                @Handbrake.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnHandbrake;
                @Handbrake.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnHandbrake;
                @ReverseGear.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnReverseGear;
                @ReverseGear.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnReverseGear;
                @ReverseGear.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnReverseGear;
                @Respawn.started -= m_Wrapper.m_DriveActionsCallbackInterface.OnRespawn;
                @Respawn.performed -= m_Wrapper.m_DriveActionsCallbackInterface.OnRespawn;
                @Respawn.canceled -= m_Wrapper.m_DriveActionsCallbackInterface.OnRespawn;
            }
            m_Wrapper.m_DriveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Throttle.started += instance.OnThrottle;
                @Throttle.performed += instance.OnThrottle;
                @Throttle.canceled += instance.OnThrottle;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
                @Steer.started += instance.OnSteer;
                @Steer.performed += instance.OnSteer;
                @Steer.canceled += instance.OnSteer;
                @Handbrake.started += instance.OnHandbrake;
                @Handbrake.performed += instance.OnHandbrake;
                @Handbrake.canceled += instance.OnHandbrake;
                @ReverseGear.started += instance.OnReverseGear;
                @ReverseGear.performed += instance.OnReverseGear;
                @ReverseGear.canceled += instance.OnReverseGear;
                @Respawn.started += instance.OnRespawn;
                @Respawn.performed += instance.OnRespawn;
                @Respawn.canceled += instance.OnRespawn;
            }
        }
    }
    public DriveActions @Drive => new DriveActions(this);
    public interface IDriveActions
    {
        void OnThrottle(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
        void OnReverseGear(InputAction.CallbackContext context);
        void OnRespawn(InputAction.CallbackContext context);
    }
}
